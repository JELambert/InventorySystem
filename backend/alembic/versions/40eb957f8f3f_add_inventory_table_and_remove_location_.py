"""Add inventory table and remove location_id from items

Revision ID: 40eb957f8f3f
Revises: 952413129ffd
Create Date: 2025-06-30 15:53:42.764689

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '40eb957f8f3f'
down_revision: Union[str, None] = '952413129ffd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Create the inventory table
    op.create_table('inventory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_id'), 'inventory', ['id'], unique=False)
    op.create_index('ix_inventory_item_id', 'inventory', ['item_id'], unique=False)
    op.create_index('ix_inventory_item_location', 'inventory', ['item_id', 'location_id'], unique=True)
    op.create_index('ix_inventory_location_id', 'inventory', ['location_id'], unique=False)
    op.create_index('ix_inventory_updated_at', 'inventory', ['updated_at'], unique=False)
    
    # Step 2: Migrate existing data from items.location_id to inventory table
    op.execute("""
        INSERT INTO inventory (item_id, location_id, quantity, updated_at)
        SELECT id, location_id, 1, COALESCE(updated_at, created_at, NOW())
        FROM items
        WHERE location_id IS NOT NULL
    """)
    
    # Step 3: Remove the old location_id column from items
    op.drop_index(op.f('ix_items_location_id'), table_name='items')
    op.drop_constraint(op.f('items_location_id_fkey'), 'items', type_='foreignkey')
    op.drop_column('items', 'location_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Re-add location_id column to items (nullable initially)
    op.add_column('items', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='Location where item is stored'))
    
    # Step 2: Migrate data back from inventory to items.location_id (primary location only)
    op.execute("""
        UPDATE items 
        SET location_id = inv.location_id
        FROM (
            SELECT DISTINCT ON (item_id) item_id, location_id
            FROM inventory
            ORDER BY item_id, id
        ) inv
        WHERE items.id = inv.item_id
    """)
    
    # Step 3: Make location_id non-nullable and add constraints
    op.alter_column('items', 'location_id', nullable=False)
    op.create_foreign_key(op.f('items_location_id_fkey'), 'items', 'locations', ['location_id'], ['id'])
    op.create_index(op.f('ix_items_location_id'), 'items', ['location_id'], unique=False)
    
    # Step 4: Drop inventory table
    op.drop_index('ix_inventory_updated_at', table_name='inventory')
    op.drop_index('ix_inventory_location_id', table_name='inventory')
    op.drop_index('ix_inventory_item_location', table_name='inventory')
    op.drop_index('ix_inventory_item_id', table_name='inventory')
    op.drop_index(op.f('ix_inventory_id'), table_name='inventory')
    op.drop_table('inventory')
    # ### end Alembic commands ###
